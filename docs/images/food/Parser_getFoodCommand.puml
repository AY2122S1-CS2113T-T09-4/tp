
@startuml
!include Style.puml
Actor User
User -> ":Parser" : "food [suffix] [arguments]"
activate ":Parser"
":Parser" -> ":Parser" : Get specific command
activate ":Parser"
":Parser" --> ":Parser" : Suffix after food
deactivate ":Parser"
alt suffix = "add"
    create ":AddFoodCommand"
    ":Parser" -> ":AddFoodCommand" :
    activate ":AddFoodCommand"
    ":AddFoodCommand" --> ":Parser" : input
    ":Parser" -> ":Parser" : Parse input
    activate ":Parser"
    ":Parser" --> ":AddFoodCommand" : Food Record
    deactivate ":Parser"
    ":AddFoodCommand" -> ":StorageFood" : Add Food Record
    ":AddFoodCommand" --> ":Parser"
    deactivate ":AddFoodCommand"
    destroy ":AddFoodCommand"
else suffix = "radd"

else suffix = "delete"
    create ":DeleteFoodCommand"
    ":Parser" -> ":DeleteFoodCommand"
    activate ":DeleteFoodCommand"
    ":DeleteFoodCommand" -> ":Parser" : Get Index
    ":Parser" --> ":DeleteFoodCommand" : Index
    ":DeleteFoodCommand" -> ":StorageFood" : Delete Food
    ":DeleteFoodCommand" --> ":Parser"
    deactivate ":DeleteFoodCommand"
    destroy ":DeleteFoodCommand"

else suffix = "clear"
    create ":ClearFoodCommand"
    ":Parser" -> ":ClearFoodCommand"
    activate ":ClearFoodCommand"
    ":ClearFoodCommand" -> ":StorageFood" : Clear list
    ":ClearFoodCommand" --> ":Parser"
    deactivate ":ClearFoodCommand"
    destroy ":ClearFoodCommand"

else suffix = "list"
    create ":ListFoodCommand"
    ":Parser" -> ":ListFoodCommand"
    activate ":ListFoodCommand"
    ":ListFoodCommand" -> ":StorageFood" : List food records
    ":ListFoodCommand" --> ":Parser"
    deactivate ":ListFoodCommand"
    destroy ":ListFoodCommand"

else suffix = "find"
    create ":FindFoodWithDateCommand"
    ":Parser" -> ":FindFoodWithDateCommand"
    activate ":FindFoodWithDateCommand"
    ":FindFoodWithDateCommand" -> ":StorageFood" : Find food records matching date
    return

else suffix = "clt"
    create ":FindFoodByCalorieCountCommand"
    ":Parser" -> ":FindFoodByCalorieCountCommand"
    activate ":FindFoodByCalorieCountCommand"
    ":FindFoodByCalorieCountCommand" -> ":StallsManager" : Find food records with <= calorie input
    return

else suffix = "view"
    create ":ViewReferenceFoodCommand"
    ":Parser" -> ":ViewReferenceFoodCommand"

    ":Parser" -> ":ViewReferenceFoodCommand"
      activate ":ViewReferenceFoodCommand"
     ":ViewReferenceFoodCommand" -> ":StallsManager"

    ":StallsManager" --> ":ViewReferenceFoodCommand" : lists all stalls
    return
    opt all
    ":Parser" -> ":ViewReferenceFoodCommand"
     activate ":ViewReferenceFoodCommand"

    ":ViewReferenceFoodCommand" -> ":StallsManager"
    ":StallsManager" --> ":ViewReferenceFoodCommand" : lists all food items
    return

    else stall index

    ":Parser" -> ":ViewReferenceFoodCommand"
     activate ":ViewReferenceFoodCommand"
    ":ViewReferenceFoodCommand" -> ":StallsManager"
    ":StallsManager" --> ":ViewReferenceFoodCommand" : lists all items sold by the store
    return
    end
else incorrect syntax
    ":Parser"-->User : Throw Exception

end
@enduml